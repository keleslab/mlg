#texprmat<- texprmat[,order()]
rownames(texprmat) <- 1:dim(texprmat)[1]
gene_list <- make.names(gene_list)
#verify the rows are in the right order
cell_order_test <- unique(texprmat[, c("Breed", "Cluster")])
heatmap_mat <- t(texprmat[, colnames(texprmat)%in%gene_list])
#need to name cells for the annotation to work
colnames(heatmap_mat) <- 1:dim(heatmap_mat)[2]
heatmap_anno <- texprmat[, c("Breed", "Cluster")]
rownames(heatmap_anno) <- 1:dim(heatmap_mat)[2]
filetitle <- sprintf("FiguresPCA/Heatmaps/heatmap_sc%s.pdf", fig_lab)
gaps_col <- as.numeric(rownames(cell_order_test)[-1]) - 1
cluster_colors <- viridis(best_k)
names(cluster_colors) <- as.character(1:best_k)
ann_colors <- list(
Cluster = cluster_colors,
Breed = c(F="#944C04", I="#0434EC")
)
if(is.null(main)){main <- "Heatmap of gene expression by cluster and treatment"}
if(!is.null(Direction)) {
ann_colors$Direction = UpDownCols
row_anno <- as.data.frame(Direction, ncol=1)
colnames(row_anno) <- "Direction"
rownames(row_anno) <- rownames(heatmap_mat)
cluster_rows = FALSE
}
if(is.null(Direction)) {
row_anno = NA
cluster_rows = TRUE
}
if(!is.null(DEClust)) {
ann_colors$Cluster = cluster_colors
row_anno <- data.frame(row_anno, Cluster=DEClust)
}
#color_fun <- colorRamp2(seq(min(heatmap_mat), max(heatmap_mat), length=3),
#                        c("blue", "#EEEEEE", "red"))
#map_cols <- color_fun(seq(min(heatmap_mat), max(heatmap_mat), length.out=100))
abs_max_val <- max(abs(min(heatmap_mat)), abs(max(heatmap_mat)))
color_fun <- colorRamp2(seq(-abs_max_val, abs_max_val, length=3),
c("blue", "#EEEEEE", "red"))
map_cols <- color_fun(seq(-abs_max_val, abs_max_val, length.out=100))
palette_length <- length(map_cols)
map_breaks <- c(seq(-abs_max_val, 0, length.out=ceiling(palette_length/2) + 1),
seq(abs_max_val/palette_length, abs_max_val,
length.out = floor(palette_length/2)))
if(!is.null(sub_samp)){
names(ann_colors$Cluster) <- as.character(unique(sub_samp_clust))
}
heatmap_sc <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
annotation_row = row_anno,
cluster_cols = FALSE,
cluster_rows = cluster_rows,
show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
gaps_col=gaps_col,
main=main,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
heatmap_sc
}
scmap1 <- sc_heatmap(gene_list, "1")
scmap1 <- sc_heatmap(gene_list, "1")
scmap2 <- sc_heatmap(neutrophil_list, "Neutrophil")
scmap3 <- sc_heatmap(monocyte_list, "Monocyte")
mmap_gata2_negbin <- sc_heatmap(mt_names, "cluster_marker", fig_width = 8, fig_height = 10)
source('~/Documents/sun/seurat_dem/KirbyData/KirbyPlot.R')
c5<- cluster_markers[cluster_markers$cluster==5&cluster_markers$avg_logFC>0.5,]
source('~/Documents/sun/seurat_dem/KirbyData/KirbyPlot.R')
source('~/Documents/sun/seurat_dem/KirbyData/KirbyPlot.R')
# load data log_2(TPM)
setwd('~/Documents/sun/seurat_dem/mouse')
install.packages("PMA")
R.home()
BiocManager::install("usethat")
BiocManager::install("usethat")
library(lige)
library(liger)
createLiger()
install.packages('devtools')
library(devtools)
install_github('MacoskoLab/liger')
install_github('MacoskoLab/liger')
library(psych)
install.packages("psych")
load("~/Documents/sun/seurat_dem/dune_example/Dune/data/clusMat.rda")
data("kowalszyk_1", package = "mlg")
library(mlg)
data("kowalszyk_1", package = "mlg")
data("kowalczyk_1", package = "mlg")
cell_info
dim(gene_expression_matrix)
cell_info
library(RColorBrewer)
library(ggplot2)
library(ggplot2)
library(knitr)
library(Seurat)
library(ggplot2)
library(knitr)
library(Seurat)
library(liger)
data("kowalczyk_1", package = "mlg")
theme_set(theme_classic())
head(cell_info)
num_component <- 15
kowalczyk_seurat <- CreateSeuratObject(counts = gene_expression_matrix, project = "kowalczyk_seurat ",
assay = "RNA",
meta.data = cell_info)
kowalczyk_seurat <- CreateSeuratObject(counts = gene_expression_matrix, project = "kowalczyk_seurat ",
assay = "RNA",
meta.data = cell_info)
kowalczyk_seurat <- FindVariableFeatures(kowalczyk_seurat, selection.method = "vst", nfeatures = 3000)
kowalczyk_seurat <- ScaleData(kowalczyk_seurat, vars.to.regress = 'condition_label')
kowalczyk_seurat <- RunPCA(kowalczyk_seurat, npcs=num_component)
kowalczyk_seurat <- RunTSNE(kowalczyk_seurat, dims = 1:num_component)
kowalczyk_seurat <- FindNeighbors(kowalczyk_seurat, dims = 1:num_component)
kowalczyk_seurat <- FindClusters(kowalczyk_seurat, resolution = 0.2, algorithm =1)
pdfCluster::adj.rand.index(kowalczyk_seurat$seurat_clusters, cell_info$cell_type_label)
condition.list <- SplitObject(kowalczyk_seurat, split.by = "condition_label")
condition.list <- SplitObject(kowalczyk_seurat, split.by = "condition_label")
int.anchors <- FindIntegrationAnchors(object.list = condition.list, anchor.features=3000)
condition.list <- SplitObject(kowalczyk_seurat, split.by = "condition_label")
int.anchors <- FindIntegrationAnchors(object.list = condition.list, anchor.features=3000)
kowalczyk.integrated <- IntegrateData(anchorset = int.anchors)
DefaultAssay(kowalczyk.integrated) <- "integrated"
kowalczyk.integrated@assays$integrated@data<- kowalczyk.integrated@assays$integrated@data[, rownames(cell_info)]
kowalczyk.integrated@meta.data<-kowalczyk.integrated@meta.data[rownames(cell_info),]
DefaultAssay(kowalczyk.integrated) <- "integrated"
kowalczyk.integrated@assays$integrated@data<- kowalczyk.integrated@assays$integrated@data[, rownames(cell_info)]
kowalczyk.integrated@meta.data<-kowalczyk.integrated@meta.data[rownames(cell_info),]
kowalczyk.integrated <- ScaleData(kowalczyk.integrated)
kowalczyk.integrated <- RunTSNE(kowalczyk.integrated)
kowalczyk.integrated <- RunPCA(kowalczyk.integrated, npcs = 30, verbose = FALSE)
kowalczyk.integrated <- RunTSNE(kowalczyk.integrated)
kowalczyk.integrated <- FindClusters(kowalczyk.integrated, resolution = 0.22, algorithm = 1)
kowalczyk.integrated <- FindNeighbors(kowalczyk.integrated,dims = 1:num_component, k.param = 20)
kowalczyk.integrated <- FindClusters(kowalczyk.integrated, resolution = 0.22, algorithm = 1)
seurat_km<- kmeans(kowalczyk.integrated@reductions$pca@cell.embeddings[,1:num_component], 3)
pdfCluster::adj.rand.index(kowalczyk.integrated$seurat_clusters, cell_info$cell_type_label)
suppressPackageStartupMessages({
library(RColorBrewer)
library(ggplot2)
library(cowplot)
library(knitr)
library(Seurat)
library(liger)
})
data("kowalczyk_1", package = "mlg")
theme_set(theme_classic())
plot_grid(ggplot(aes(kowalczyk_seurat@reductions$tsne@cell.embeddings[,1],kowalczyk_seurat@reductions$tsne@cell.embeddings[,1])))
plot_grid(ggplot(aes(x=kowalczyk_seurat@reductions$tsne@cell.embeddings[,1],y=kowalczyk_seurat@reductions$tsne@cell.embeddings[,1])))
tSNE_coord =data.frame(kowalczyk_seurat@reductions$tsne@cell.embeddings)
head(tSNE_coord)
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label)))
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+geom_point())
```{r, fig.hold='hold', out.width="33%", fig.height=3}
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+geom_point())
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=celltype))+geom_point())
tSNE_coord =data.frame(kowalczyk_seurat@reductions$tsne@cell.embeddings, celltype=cell_info$cell_type_label)
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=celltype))+geom_point())
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+geom_point()+labs(color="celltype"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+geom_point())
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+geom_point()+labs(color="cell type"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+labs(color="cluster")+geom_point())
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+labs(color="cluster")+geom_point())
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
```{r, fig.hold='hold', out.width="50%", fig.height=3}
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
```{r, fig.hold='hold', out.width="50%", fig.height=4}
plot_grid(ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
pdfCluster::adj.rand.index(kowalczyk_seurat$seurat_clusters, cell_info$cell_type_label)
tSNE_coord_PCA =data.frame(kowalczyk_seurat@reductions$tsne@cell.embeddings)
plot_grid(ggplot(tSNE_coord_PCA,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
tSNE_coord_Seurat =data.frame(kowalczyk_seurat@reductions$tsne@cell.embeddings)
plot_grid(ggplot(tSNE_coord_Seurat,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_Seurat,aes(tSNE_1, tSNE_2, color=kowalczyk.integrated$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
```{r, fig.hold='hold', out.width="33%", fig.height=4}
plot_grid(ggplot(tSNE_coord_Seurat,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_Seurat,aes(tSNE_1, tSNE_2, color=kowalczyk.integrated$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
pdfCluster::adj.rand.index(kowalczyk.integrated$seurat_clusters, cell_info$cell_type_label)
=condition.list
condition.list
table(cell_info$condition_label)
ligerex = createLiger(list(young=condition.list[[1]]@assays$RNA@counts,
old=condition.list[[2]]@assays$RNA@counts))
ligerex = liger::normalize(ligerex)
ligerex = selectGenes(ligerex, num.genes = 3000)
length(ligerex@var.genes)
ligerex = selectGenes(ligerex, var.thresh = .728)
length(ligerex@var.genes)
ligerex = selectGenes(ligerex, var.thresh = .729) # to keep 3000 genes
length(ligerex@var.genes)
ligerex = selectGenes(ligerex, var.thresh = .7285) # to keep 3000 genes
length(ligerex@var.genes)
ligerex = selectGenes(ligerex, var.thresh = .7283) # to keep 3000 genes
length(ligerex@var.genes)
ligerex = selectGenes(ligerex, var.thresh = .7282) # to keep 3000 genes
length(ligerex@var.genes)
ligerex = selectGenes(ligerex, var.thresh = .7281) # to keep 3000 genes
length(ligerex@var.genes)
ligerex = scaleNotCenter(ligerex)
ligerex = optimizeALS(ligerex, k = ncomp)
ligerex = optimizeALS(ligerex, k = num_component)
ligerex = quantileAlignSNF(ligerex, resolution=0.4)
ligerex = quantile_norm(ligerex, resolution=0.4)
ligerex = quantile_norm(ligerex)
ligerex = qquantile_norm(ligerex, resolution=0.4)
ligerex = quantile_norm(ligerex, resolution=0.4)
ligerex = optimizeALS(ligerex, k = num_component)
ligerex = quantile_norm(ligerex, resolution=0.4)
ligerex = quantile_norm(ligerex)
ligerex
unique(ligerex@clusters)
ligerex = quantile_norm(ligerex,resolution=.4)
unique(ligerex@clusters)
ligerex = quantile_norm(ligerex,resolution=.1)
unique(ligerex@clusters)
ligerex<- runTSNE(ligerex)
plot_grid(
plotdatalabel(ligerex@tsne.coords, ligerex@clusters),
plotdatalabel(ligerex@tsne.coords, group))
pdfCluster::adj.rand.index(group, ligerex@clusters)
pdfCluster::adj.rand.index(ligerex@clusters, cell_info$cell_type_label)
ligerex = quantile_norm(ligerex,resolution=1)
tSNE_coord_Liger =data.frame(ligerex@tsne.coords)
plot_grid(ggplot(tSNE_coord_PCA,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=ligerex@clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
cnmf_graph <- FindNeighbors(cnmf_factor)
cnmf_cluster <- FindClusters(cnmf_graph$snn, resolution = 0.2, algorithm =1)[[1]]
cnmf_cluster <- FindClusters(cnmf_graph$snn, resolution = 0.15, algorithm =1)[[1]]
tSNE_cNMF<-RunTSNE(cnmf_factor)
tSNE_coord_cNMF =data.frame(tSNE_cNMF)
tSNE_coord_cNMF =data.frame(tSNE_cNMF@cell.embeddings)
plot_grid(ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord,aes(tSNE_1, tSNE_2, color=cnmf_cluster))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
plot_grid(ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cnmf_cluster))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
plot_grid(ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cnmf_cluster))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
pdfCluster::adj.rand.index(cnmf_cluster, cell_info$cell_type_label)
plot_grid(ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cnmf_cluster))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
factor_list<- list(PCA=kowalczyk_seurat@reductions$pca@cell.embeddings[,1:num_component],
cNMF=cnmf_factor,
Seurat=kowalczyk.integrated@reductions$pca@cell.embeddings[,1:num_component],
Liger=liger_factor)
liger_factor=rbind(ligerex@H$young,ligerex@H$old)
# reorder the cells, so that the cell order are the same as in original data
liger_factor=liger_factor[rownames(cell_info),]
# scale the penalized NMF score for each cell, so that they sums to 1
liger_factor=t(apply(liger_factor, 1, function(i){i/sum(i)}))
factor_list<- list(PCA=kowalczyk_seurat@reductions$pca@cell.embeddings[,1:num_component],
cNMF=cnmf_factor,
Seurat=kowalczyk.integrated@reductions$pca@cell.embeddings[,1:num_component],
Liger=liger_factor)
mlg_cluster(factor.list = factor_list, resolution=.5)
mlg_cluster(factor.list = factor_list, cluster.resolution=.5)
MLG = mlg_cluster(factor.list = factor_list, cluster.resolution=.5)
pdfCluster::adj.rand.index(MLG, cell_info$cell_type_label)
prop.overlap.edges(factor_list)
names(factor_list)
factor.list=factor_list
snn.list = .generate_snn_graph(factor.list, knn.param, prune.param)
knn.param=20
prune.param=1/5
snn.list = .generate_snn_graph(factor.list, knn.param, prune.param)
#graph_signal_noise_ratio(factor.list , cell_label =cell_label )
######################################################################################################################
######################################################################################################################
.generate_snn_graph <- function(factor.list, knn.param=20, prune.param=1/5){
n_layer = length(factor.list)
# check the dimension of each of the low-dimensional embedding
ncells = unlist(lapply(factor.list, nrow))
ncell=ncells[1]
if (sum(abs(ncells-ncell))>0){
stop("Number of cells in each layer are not the same.")
}
Jaccard_Index =  prune.param/(2 - prune.param)
if(is.null(names(factor.list))){
names(factor.list)=sprintf("layer%s", 1:n_layer)
}
snn.list = list()
for (i in 1:n_layer){
if (is.null(rownames(factor.list[[i]]))){
rownames(factor.list[[i]])=sprintf("Cell%s", 1:ncells[1])
}
nn_graph <- Seurat::FindNeighbors(factor.list[[i]],  k.param=knn.param, prune.SNN = Jaccard_Index)
snn.list[[i]] = nn_graph$snn
snn.list[[i]][snn.list[[i]]>0]=1
diag(snn.list[[i]])=0
}
names(snn.list) = names(factor.list)
return(snn.list)
}
.generate_mlg<-function(snn.list){
n_layer = length(snn.list)
ncell=nrow(snn.list[[1]])
mlg = Matrix::sparseMatrix(dims = c(ncell, ncell), i={}, j={})
for (i in 1:n_layer){
mlg = mlg + snn.list[[i]]
}
mlg[mlg>0]=1
return(mlg)
}
snn.list = .generate_snn_graph(factor.list, knn.param, prune.param)
n = length(snn.list)
mat = matrix(NA, n, n)
for (i in 1:n){
for (j in i:n){
mat[i,j]=sum(snn.list[[i]]*snn.list[[j]])*2/(sum(snn.list[[i]])+sum(snn.list[[j]]))
}
}
rownames(mat)= names(snn.list)
colnames(mat)= names(snn.list)
melt_matrix = data.frame(Var1 = as.character(sort(factor(rep(rownames(mat), nrow(mat)), levels=rownames(mat)))),
Var2 = rep(rownames(mat), nrow(mat)), value = as.vector(t(mat)))
melt_matrix=melt_matrix[!is.na(melt_matrix$value),]
matrix(data, nrow = rows, ncol = cols)
mat
melt_matrix = data.frame(Var1 = as.character(sort(factor(rep(rownames(mat), nrow(mat)), levels=rownames(mat)))),
Var2 = rep(rownames(mat), nrow(mat)), value = as.vector(t(mat)))
melt_matrix=melt_matrix[!is.na(melt_matrix$value),]
melt_matrix
p=ggplot2::ggplot(data = melt_matrix, ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile()+ggplot2::scale_fill_continuous(low="thistle2", high="darkred",
guide="colorbar",na.value="white",limits=c(0,1))+
ggplot2::xlab("")+ggplot2::ylab("")+ggplot2::labs(fill="Proportion of \noverlapped edges    ")+
ggplot2::theme(axis.text.x = ggplot2::element_text(face="bold",
size=10),
axis.text.y = ggplot2::element_text(face="bold",
size=10),
legend.text=ggplot2::element_text(size=10),
legend.title=ggplot2::element_text(size=12, face="bold"),
legend.position = "bottom",
panel.background = ggplot2::element_blank())+
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)))
p
melt_matrix$Var2 = factor(melt_matrix$Var2, levels = rownames(mat))
p=ggplot2::ggplot(data = melt_matrix, ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile()+ggplot2::scale_fill_continuous(low="thistle2", high="darkred",
guide="colorbar",na.value="white",limits=c(0,1))+
ggplot2::xlab("")+ggplot2::ylab("")+ggplot2::labs(fill="Proportion of \noverlapped edges    ")+
ggplot2::theme(axis.text.x = ggplot2::element_text(face="bold",
size=10),
axis.text.y = ggplot2::element_text(face="bold",
size=10),
legend.text=ggplot2::element_text(size=10),
legend.title=ggplot2::element_text(size=12, face="bold"),
legend.position = "bottom",
panel.background = ggplot2::element_blank())+
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)))
p
reshape2::melt(mat)
melt_matrix =  reshape2::melt(mat)
melt_matrix=melt_matrix[!is.na(melt_matrix$value),]]
melt_matrix
melt_matrix=melt_matrix[!is.na(melt_matrix$value),]
p=ggplot2::ggplot(data = melt_matrix, ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile()+ggplot2::scale_fill_continuous(low="thistle2", high="darkred",
guide="colorbar",na.value="white",limits=c(0,1))+
ggplot2::xlab("")+ggplot2::ylab("")+ggplot2::labs(fill="Proportion of \noverlapped edges    ")+
ggplot2::theme(axis.text.x = ggplot2::element_text(face="bold",
size=10),
axis.text.y = ggplot2::element_text(face="bold",
size=10),
legend.text=ggplot2::element_text(size=10),
legend.title=ggplot2::element_text(size=12, face="bold"),
legend.position = "bottom",
panel.background = ggplot2::element_blank())+
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)))
p
prop.overlap.edges(factor_list)
pprop.overlap.edges(factor_list)
p = prop.overlap.edges(factor_list)
p
graph_signal_noise_ratio(factor.list, knn.param=20, prune.param=1/5, cell_label=cell_info$cell_type_label)
getwd()
setwd('~/Documents/sun/seurat_dem/mlg/')
devtools::document()
devtools::document()
head(tSNE_coord_PCA)
head(tSNE_coord_Liger)
suppressPackageStartupMessages({
library(RColorBrewer)
library(ggplot2)
library(cowplot)
library(knitr)
library(Seurat)
library(liger)
library(network)
library(igraph)
})
data("kowalczyk_1", package = "mlg")
theme_set(theme_classic())
plot_grid(ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=ligerex@clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
tSNE_coord_Liger <- data.frame(ligerex@tsne.coords)
colnames(tSNE_coord_Liger) <- c("tSNE_1", "tSNE_2")
plot_grid(ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=ligerex@clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
ligerex = quantile_norm(ligerex,resolution=.1)
unique(ligerex@clusters)
ligerex = quantile_norm(ligerex,resolution=.2)
unique(ligerex@clusters)
tSNE_coord_Liger <- data.frame(ligerex@tsne.coords)
colnames(tSNE_coord_Liger) <- c("tSNE_1", "tSNE_2")
plot_grid(ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=ligerex@clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
tSNE_coord_cNMF =data.frame(tSNE_cNMF@cell.embeddings)
head(tSNE_coord_cNMF)
devtools::document()
tSNE_coord_PCA < data.frame(kowalczyk_seurat@reductions$tsne@cell.embeddings)
plot_grid(ggplot(tSNE_coord_PCA,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_PCA,aes(tSNE_1, tSNE_2, color=kowalczyk_seurat$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
pdfCluster::adj.rand.index(kowalczyk_seurat$seurat_clusters, cell_info$cell_type_label)
tSNE_coord_Seurat <- data.frame(kowalczyk_seurat@reductions$tsne@cell.embeddings)
plot_grid(ggplot(tSNE_coord_Seurat,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_Seurat,aes(tSNE_1, tSNE_2, color=kowalczyk.integrated$seurat_clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
pdfCluster::adj.rand.index(kowalczyk.integrated$seurat_clusters, cell_info$cell_type_label)
tSNE_coord_Liger <- data.frame(ligerex@tsne.coords)
colnames(tSNE_coord_Liger) <- c("tSNE_1", "tSNE_2")
plot_grid(ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_Liger,aes(tSNE_1, tSNE_2, color=ligerex@clusters))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
pdfCluster::adj.rand.index(ligerex@clusters, cell_info$cell_type_label)
plot_grid(ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cnmf_cluster))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
pdfCluster::adj.rand.index(cnmf_cluster, cell_info$cell_type_label)
liger_factor=rbind(ligerex@H$young,ligerex@H$old)
# reorder the cells, so that the cell order are the same as in original data
liger_factor=liger_factor[rownames(cell_info),]
# scale the penalized NMF score for each cell, so that they sums to 1
liger_factor=t(apply(liger_factor, 1, function(i){i/sum(i)}))
factor_list<- list(PCA=kowalczyk_seurat@reductions$pca@cell.embeddings[,1:num_component],
cNMF=cnmf_factor,
Seurat=kowalczyk.integrated@reductions$pca@cell.embeddings[,1:num_component],
Liger=liger_factor)
MLG = mlg_cluster(factor.list = factor_list, cluster.resolution=.5)
pdfCluster::adj.rand.index(MLG, cell_info$cell_type_label)
p = prop.overlap.edges(factor_list)
p
graph_signal_noise_ratio(factor.list, knn.param=20, prune.param=1/5, cell_label=cell_info$cell_type_label)
nn_graph <- Seurat::FindNeighbors(factor.list[[i]],  k.param=knn.param, prune.SNN = Jaccard_Index, verbose = F)
n_layer = length(factor.list)
# check the dimension of each of the low-dimensional embedding
ncells = unlist(lapply(factor.list, nrow))
ncell=ncells[1]
if (sum(abs(ncells-ncell))>0){
stop("Number of cells in each layer are not the same.")
}
Jaccard_Index =  prune.param/(2 - prune.param)
if(is.null(names(factor.list))){
names(factor.list)=sprintf("layer%s", 1:n_layer)
}
snn.list = list()
for (i in 1:n_layer){
if (is.null(rownames(factor.list[[i]]))){
rownames(factor.list[[i]])=sprintf("Cell%s", 1:ncells[1])
}
nn_graph <- Seurat::FindNeighbors(factor.list[[i]],  k.param=knn.param, prune.SNN = Jaccard_Index, verbose = F)
snn.list[[i]] = nn_graph$snn
snn.list[[i]][snn.list[[i]]>0]=1
diag(snn.list[[i]])=0
}
devtools::document()
library(mlg)
data("kowalczyk_1", package = "mlg")
