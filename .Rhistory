}
if(!is.null(sub_samp)){
gaps_col <- c(1)
names(ann_colors$Cluster) <- as.character(unique(sub_samp_clust))
}
print(best_k)
heatmap_med <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
cluster_rows = cluster_rows,
annotation_row = row_anno,
cluster_cols = FALSE, show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
main=main,
gaps_col=gaps_col,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
ann_colors
ann_colors <- list(
Breed = c(F="#944C04", I="#0434EC"),
Cluster = cluster_colors
)
heatmap_med <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
cluster_rows = cluster_rows,
annotation_row = row_anno,
cluster_cols = FALSE, show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
main=main,
gaps_col=gaps_col,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
heatmap_med
med_heatmap <- function(gene_list, fig_lab, main=NULL, fig_width=12, fig_height=8,
Direction=NULL, DEClust=NULL, sub_samp=NULL, sub_samp_clust=NULL){
texprmat <- t(sce_seurat@assays$RNA@scale.data[,sce$breed=='WT'])
if(is.null(sub_samp)){
texprmat <- data.frame(Breed=sce$batch_name[sce$breed=="WT"],
Cluster=as.character(optimal_clustering$cluster),
texprmat[, colnames(texprmat)%in%gene_list])
best_k=length(unique(optimal_clustering$cluster))
}
#this will be used for the Gata2 heatmaps or more generally any subgroup of data
#first take the desired sub sample
#second add the clustering for the subsample
if(!is.null(sub_samp)){
browser()
texprmat <- data.frame(Breed=sce$breed_name,
Cluster=as.character(optimal_clustering$cluster),
texprmat[, gene_list])
texprmat <- texprmat[sub_samp, ]
texprmat$Cluster <- sub_samp_clust
best_k <- length(unique(sub_samp_clust))
}
texprmat$Breed <- factor(texprmat$Breed, levels=c("F", "I"))
gene_list <- make.names(gene_list)
med_aggr <-  aggregate(texprmat[,colnames(texprmat)%in%gene_list], list(Breed=texprmat$Breed,
Cluster=texprmat$Cluster), median)
heatmap_anno <- med_aggr[, 1:2]
heatmap_mat <- t(med_aggr[, -c(1:2)])
colnames(heatmap_mat) <- 1:dim(heatmap_mat)[2]
class(heatmap_anno) <- "data.frame"
rownames(heatmap_anno) <- 1:dim(heatmap_mat)[2]
heatmap_colnum <- dim(heatmap_mat)[2]
cluster_colors <- viridis(best_k)
names(cluster_colors) <- as.character(1:best_k)
ann_colors <- list(
Breed = c(F="#944C04", I="#0434EC"),
Cluster = cluster_colors
)
filetitle <- sprintf("FiguresPCA/Heatmaps/heatmap_med%s.pdf", fig_lab)
if(is.null(main)){main <- "Heatmap of median gene expression by cluster and treatment"}
if(!is.null(Direction)){
ann_colors$Direction = UpDownCols
row_anno <- as.data.frame(Direction, ncol=1)
colnames(row_anno) <- "Direction"
rownames(row_anno) <- rownames(heatmap_mat)
cluster_rows = FALSE
}
if(is.null(Direction)){
row_anno = NA
cluster_rows = TRUE
}
if(!is.null(DEClust)){
ann_colors$Cluster = cluster_colors
row_anno <- data.frame(row_anno, Cluster=DEClust)
}
#original setting
#color_fun <- colorRamp2(seq(min(heatmap_mat), max(heatmap_mat), length=3),
#                        c("blue", "#EEEEEE", "red"))
#map_cols <- color_fun(seq(min(heatmap_mat), max(heatmap_mat), length.out=100))
#palette_length <- length(map_cols)
#map_breaks <- c(seq(min(heatmap_mat), 0, length.out=ceiling(palette_length/2) + 1),
#                seq(max(heatmap_mat)/palette_length, max(heatmap_mat),
#                    length.out = floor(palette_length/2)))
abs_max_val <- max(abs(min(heatmap_mat)), abs(max(heatmap_mat)))
color_fun <- colorRamp2(seq(-abs_max_val, abs_max_val, length=3),
c("blue", "#EEEEEE", "red"))
map_cols <- color_fun(seq(-abs_max_val, abs_max_val, length.out=100))
palette_length <- length(map_cols)
map_breaks <- c(seq(-abs_max_val, 0, length.out=ceiling(palette_length/2) + 1),
seq(abs_max_val/palette_length, abs_max_val,
length.out = floor(palette_length/2)))
if(is.null(sub_samp)){
gaps_col <- seq(2, heatmap_colnum - 2, 2)
}
if(!is.null(sub_samp)){
gaps_col <- c(1)
names(ann_colors$Cluster) <- as.character(unique(sub_samp_clust))
}
print(best_k)
heatmap_med <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
cluster_rows = cluster_rows,
annotation_row = row_anno,
cluster_cols = FALSE, show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
main=main,
gaps_col=gaps_col,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
heatmap_med
}
mmap <- med_heatmap(gene_list, "1")
mmap2 <- med_heatmap(neutrophil_list, "Neutrophil")
mmap3 <- med_heatmap(monocyte_list, "Monocyte")
mmap_gata2_negbin <- med_heatmap(mt_names, "cluster_marker", fig_width = 8, fig_height = 10)
mmap_gata2_negbin <- sc_heatmap(mt_names, "cluster_marker", fig_width = 8, fig_height = 10)
mt_names
mt_names<- gene_cluster_enrichment$gene
mmap_gata2_negbin <- med_heatmap(mt_names, "cluster_marker", fig_width = 8, fig_height = 10)
mt_names
texprmat <- t(sce_seurat@assays$RNA@scale.data[, sce$breed=='WT'])
if(is.null(sub_samp)){
texprmat <- data.frame(Breed=sce$batch_name,
Cluster=as.character(optimal_clustering$cluster),
texprmat[, colnames(texprmat)%in%gene_list])
best_k=length(unique(optimal_clustering$cluster))
}
#this will be used for the Gata2 heatmaps or more generally any subgroup of data
#first take the desired sub sample
#second add the clustering for the subsample
if(!is.null(sub_samp)){
texprmat <- data.frame(Breed=sce$breed_name,
Cluster=as.character(optimal_clustering$cluster),
texprmat[, gene_list])
texprmat <- texprmat[sub_samp, ]
texprmat$Cluster <- sub_samp_clust
best_k <- length(unique(sub_samp_clust))
}
if(is.null(sub_samp)){
texprmat <- data.frame(Breed=sce$batch_name,
Cluster=as.character(optimal_clustering$cluster),
texprmat[, colnames(texprmat)%in%gene_list])
best_k=length(unique(optimal_clustering$cluster))
}
texprmat <- data.frame(Breed=sce$batch_name,
Cluster=as.character(optimal_clustering$cluster),
texprmat[, colnames(texprmat)%in%gene_list])
texprmat <- data.frame(Breed=sce$batch_name[sce$breed=='WT],
texprmat <- data.frame(Breed=sce$batch_name[sce$breed=='WT'],
sce$batch_name[sce$breed=='WT']
texprmat <- data.frame(Breed=sce$batch_name[sce$breed=='WT'],
Cluster=as.character(optimal_clustering$cluster),
texprmat[, colnames(texprmat)%in%gene_list])
best_k=length(unique(optimal_clustering$cluster))
texprmat$Breed <- factor(texprmat$Breed, levels=c("F", "I"))
texprmat <- dplyr::arrange(texprmat, Cluster, Breed)
#texprmat <- data.frame(breedclust=paste0(texprmat$breed, texprmat$cluster),
#                       texprmat)
texprmat_split <- split(texprmat, list(texprmat$Breed, texprmat$Cluster))
gene_list <- make.names(gene_list)
cluster_orders <- lapply(texprmat_split,
function(x){
tryCatch({
hclust_obj <- hclust(dist(x[, gene_list]), method="complete")
order <- hclust_obj$order
},
error = function(e) {
NULL
})})
#texprmat_order <- lapply(1:length(texprmat_split), function(x){
#                          if(!is.null(texprmat_split[[x]])){
#                           out <- texprmat_split[[x]][cluster_orders[[x]], ]
#                            return(out)
#                          } else {
#                            NULL
#                          }})
#texprmat <- do.call("rbind", texprmat_order)
#texprmat<- texprmat[,order()]
rownames(texprmat) <- 1:dim(texprmat)[1]
gene_list <- make.names(gene_list)
#verify the rows are in the right order
cell_order_test <- unique(texprmat[, c("Breed", "Cluster")])
heatmap_mat <- t(texprmat[, colnames(texprmat)%in%gene_list])
#need to name cells for the annotation to work
colnames(heatmap_mat) <- 1:dim(heatmap_mat)[2]
heatmap_anno <- texprmat[, c("Breed", "Cluster")]
rownames(heatmap_anno) <- 1:dim(heatmap_mat)[2]
filetitle <- sprintf("FiguresPCA/Heatmaps/heatmap_sc%s.pdf", fig_lab)
gaps_col <- as.numeric(rownames(cell_order_test)[-1]) - 1
cluster_colors <- viridis(best_k)
names(cluster_colors) <- as.character(1:best_k)
ann_colors <- list(
Cluster = cluster_colors,
Breed = c(WT="#944C04", MT="#0434EC")
)
if(is.null(main)){main <- "Heatmap of gene expression by cluster and treatment"}
if(!is.null(Direction)) {
ann_colors$Direction = UpDownCols
row_anno <- as.data.frame(Direction, ncol=1)
colnames(row_anno) <- "Direction"
rownames(row_anno) <- rownames(heatmap_mat)
cluster_rows = FALSE
}
if(is.null(Direction)) {
row_anno = NA
cluster_rows = TRUE
}
if(!is.null(DEClust)) {
ann_colors$Cluster = cluster_colors
row_anno <- data.frame(row_anno, Cluster=DEClust)
}
abs_max_val <- max(abs(min(heatmap_mat)), abs(max(heatmap_mat)))
color_fun <- colorRamp2(seq(-abs_max_val, abs_max_val, length=3),
c("blue", "#EEEEEE", "red"))
map_cols <- color_fun(seq(-abs_max_val, abs_max_val, length.out=100))
palette_length <- length(map_cols)
map_breaks <- c(seq(-abs_max_val, 0, length.out=ceiling(palette_length/2) + 1),
seq(abs_max_val/palette_length, abs_max_val,
length.out = floor(palette_length/2)))
if(!is.null(sub_samp)){
names(ann_colors$Cluster) <- as.character(unique(sub_samp_clust))
}
heatmap_sc <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
annotation_row = row_anno,
cluster_cols = FALSE,
cluster_rows = cluster_rows,
show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
gaps_col=gaps_col,
main=main,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
heatmap_sc
heatmap_sc <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
annotation_row = row_anno,
cluster_cols = FALSE,
cluster_rows = cluster_rows,
show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
gaps_col=gaps_col,
main=main,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
ann_colors
ann_colors <- list(
Cluster = cluster_colors,
Breed = c(F="#944C04", I="#0434EC")
)
ann_colors <- list(
Cluster = cluster_colors,
Breed = c(F="#944C04", I="#0434EC")
)
if(is.null(main)){main <- "Heatmap of gene expression by cluster and treatment"}
if(!is.null(Direction)) {
ann_colors$Direction = UpDownCols
row_anno <- as.data.frame(Direction, ncol=1)
colnames(row_anno) <- "Direction"
rownames(row_anno) <- rownames(heatmap_mat)
cluster_rows = FALSE
}
if(is.null(Direction)) {
row_anno = NA
cluster_rows = TRUE
}
abs_max_val <- max(abs(min(heatmap_mat)), abs(max(heatmap_mat)))
color_fun <- colorRamp2(seq(-abs_max_val, abs_max_val, length=3),
c("blue", "#EEEEEE", "red"))
map_cols <- color_fun(seq(-abs_max_val, abs_max_val, length.out=100))
palette_length <- length(map_cols)
map_breaks <- c(seq(-abs_max_val, 0, length.out=ceiling(palette_length/2) + 1),
seq(abs_max_val/palette_length, abs_max_val,
length.out = floor(palette_length/2)))
if(!is.null(sub_samp)){
names(ann_colors$Cluster) <- as.character(unique(sub_samp_clust))
}
heatmap_sc <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
annotation_row = row_anno,
cluster_cols = FALSE,
cluster_rows = cluster_rows,
show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
gaps_col=gaps_col,
main=main,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
heatmap_sc <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
annotation_row = row_anno,
cluster_cols = FALSE,
cluster_rows = cluster_rows,
show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
gaps_col=gaps_col,
main=main,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
heatmap_sc
#next make the single cell version
#first we need to sort the rows of texprmat by cluster and breed
#then we can transpose the matrix
sc_heatmap <- function(gene_list, fig_lab, main=NULL,
fig_width=12, fig_height=8,
Direction=NULL, DEClust=NULL,
sub_samp = NULL, sub_samp_clust = NULL) {
texprmat <- t(sce_seurat@assays$RNA@scale.data[, sce$breed=='WT'])
if(is.null(sub_samp)){
texprmat <- data.frame(Breed=sce$batch_name[sce$breed=='WT'],
Cluster=as.character(optimal_clustering$cluster),
texprmat[, colnames(texprmat)%in%gene_list])
best_k=length(unique(optimal_clustering$cluster))
}
#this will be used for the Gata2 heatmaps or more generally any subgroup of data
#first take the desired sub sample
#second add the clustering for the subsample
if(!is.null(sub_samp)){
texprmat <- data.frame(Breed=sce$breed_name,
Cluster=as.character(optimal_clustering$cluster),
texprmat[, gene_list])
texprmat <- texprmat[sub_samp, ]
texprmat$Cluster <- sub_samp_clust
best_k <- length(unique(sub_samp_clust))
}
texprmat$Breed <- factor(texprmat$Breed, levels=c("F", "I"))
texprmat <- dplyr::arrange(texprmat, Cluster, Breed)
#texprmat <- data.frame(breedclust=paste0(texprmat$breed, texprmat$cluster),
#                       texprmat)
texprmat_split <- split(texprmat, list(texprmat$Breed, texprmat$Cluster))
gene_list <- make.names(gene_list)
cluster_orders <- lapply(texprmat_split,
function(x){
tryCatch({
hclust_obj <- hclust(dist(x[, gene_list]), method="complete")
order <- hclust_obj$order
},
error = function(e) {
NULL
})})
#texprmat_order <- lapply(1:length(texprmat_split), function(x){
#                          if(!is.null(texprmat_split[[x]])){
#                           out <- texprmat_split[[x]][cluster_orders[[x]], ]
#                            return(out)
#                          } else {
#                            NULL
#                          }})
#texprmat <- do.call("rbind", texprmat_order)
#texprmat<- texprmat[,order()]
rownames(texprmat) <- 1:dim(texprmat)[1]
gene_list <- make.names(gene_list)
#verify the rows are in the right order
cell_order_test <- unique(texprmat[, c("Breed", "Cluster")])
heatmap_mat <- t(texprmat[, colnames(texprmat)%in%gene_list])
#need to name cells for the annotation to work
colnames(heatmap_mat) <- 1:dim(heatmap_mat)[2]
heatmap_anno <- texprmat[, c("Breed", "Cluster")]
rownames(heatmap_anno) <- 1:dim(heatmap_mat)[2]
filetitle <- sprintf("FiguresPCA/Heatmaps/heatmap_sc%s.pdf", fig_lab)
gaps_col <- as.numeric(rownames(cell_order_test)[-1]) - 1
cluster_colors <- viridis(best_k)
names(cluster_colors) <- as.character(1:best_k)
ann_colors <- list(
Cluster = cluster_colors,
Breed = c(F="#944C04", I="#0434EC")
)
if(is.null(main)){main <- "Heatmap of gene expression by cluster and treatment"}
if(!is.null(Direction)) {
ann_colors$Direction = UpDownCols
row_anno <- as.data.frame(Direction, ncol=1)
colnames(row_anno) <- "Direction"
rownames(row_anno) <- rownames(heatmap_mat)
cluster_rows = FALSE
}
if(is.null(Direction)) {
row_anno = NA
cluster_rows = TRUE
}
if(!is.null(DEClust)) {
ann_colors$Cluster = cluster_colors
row_anno <- data.frame(row_anno, Cluster=DEClust)
}
#color_fun <- colorRamp2(seq(min(heatmap_mat), max(heatmap_mat), length=3),
#                        c("blue", "#EEEEEE", "red"))
#map_cols <- color_fun(seq(min(heatmap_mat), max(heatmap_mat), length.out=100))
abs_max_val <- max(abs(min(heatmap_mat)), abs(max(heatmap_mat)))
color_fun <- colorRamp2(seq(-abs_max_val, abs_max_val, length=3),
c("blue", "#EEEEEE", "red"))
map_cols <- color_fun(seq(-abs_max_val, abs_max_val, length.out=100))
palette_length <- length(map_cols)
map_breaks <- c(seq(-abs_max_val, 0, length.out=ceiling(palette_length/2) + 1),
seq(abs_max_val/palette_length, abs_max_val,
length.out = floor(palette_length/2)))
if(!is.null(sub_samp)){
names(ann_colors$Cluster) <- as.character(unique(sub_samp_clust))
}
heatmap_sc <- pheatmap::pheatmap(heatmap_mat, annotation_col = heatmap_anno,
#color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(100),
breaks = map_breaks,
color = map_cols,
annotation_row = row_anno,
cluster_cols = FALSE,
cluster_rows = cluster_rows,
show_colnames = FALSE,
treeheight_row = 0,
annotation_colors = ann_colors,
gaps_col=gaps_col,
main=main,
filename=filetitle, width=fig_width,
height=fig_height,
silent=T)
heatmap_sc
}
scmap1 <- sc_heatmap(gene_list, "1")
scmap1 <- sc_heatmap(gene_list, "1")
scmap2 <- sc_heatmap(neutrophil_list, "Neutrophil")
scmap3 <- sc_heatmap(monocyte_list, "Monocyte")
mmap_gata2_negbin <- sc_heatmap(mt_names, "cluster_marker", fig_width = 8, fig_height = 10)
source('~/Documents/sun/seurat_dem/KirbyData/KirbyPlot.R')
c5<- cluster_markers[cluster_markers$cluster==5&cluster_markers$avg_logFC>0.5,]
source('~/Documents/sun/seurat_dem/KirbyData/KirbyPlot.R')
source('~/Documents/sun/seurat_dem/KirbyData/KirbyPlot.R')
# load data log_2(TPM)
setwd('~/Documents/sun/seurat_dem/mouse')
install.packages("PMA")
R.home()
BiocManager::install("usethat")
BiocManager::install("usethat")
library(lige)
library(liger)
createLiger()
install.packages('devtools')
library(devtools)
install_github('MacoskoLab/liger')
install_github('MacoskoLab/liger')
library(psych)
install.packages("psych")
data("kowalczyk_1", package = "mlg")
library(RColorBrewer)
library(cowplot)
library(cowplot)
library(knitr)
library(Seurat)
library(liger)
library(knitr)
library(Seurat)
library(liger)
library(mlg)
cnmf_factor
```{r, fig.hold='hold', out.width="33%", fig.height=6, echo=F}
cnmf_graph <- FindNeighbors(cnmf_factor)
cnmf_cluster <- FindClusters(cnmf_graph$snn, resolution = 0.15, algorithm =1)[[1]]
tSNE_cNMF<-RunTSNE(cnmf_factor)
tSNE_cNMF<-RunTSNE(cnmf_factor)
tSNE_coord_cNMF =data.frame(tSNE_cNMF@cell.embeddings)
tSNE_coord_cNMF =data.frame(tSNE_cNMF@cell.embeddings)
# Visualization of the dataset on tSNE coordinates
plot_grid(ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cell_info$cell_type_label))+
geom_point()+labs(color="cell type")+theme(legend.position = "bottom"),
ggplot(tSNE_coord_cNMF,aes(tSNE_1, tSNE_2, color=cnmf_cluster))+
labs(color="cluster")+theme(legend.position = "bottom")+geom_point())
tSNE_cNMF<-RunTSNE(cnmf_factor, verbose=F)
names(clustering_acc) = c("PCA", "cNMF", "Seurat", "Liger", "MLG")
library(mlg)
library(liger)
quantileAlignSNF()
ligerex = quantileAlignSNF(ligerex, resolution=0.4)
ligerex = createLiger(list(young=mul.list[[1]]@assays$RNA@counts,
old=mul.list[[2]]@assays$RNA@counts))
setwd("~/Documents/sun/seurat_dem/mlg/")
devtools::document()
devtools::document()
library(mlg)
